# SceneTogether Project Rules

## Project Documentation

- **Primary Context**: Read `.ai/gpt-helper.md` for complete project plan, architecture, and feature specifications
- **Historical Context**: `.docs/` contains implementation summaries, cleanup reports, and completion checklists
- **Deployment**: `DEPLOYMENT.md` at root for active deployment instructions

## Project Structure

This is a monorepo using Turborepo + pnpm:

- `api/` - Node.js/Express backend with PostgreSQL (Prisma ORM)
- `mobile/` - Expo React Native app (iOS, Android, and Web)
- Shared workspace using `pnpm-workspace.yaml`

## Tech Stack

**Backend (api/):**

- Node.js + Express + TypeScript
- PostgreSQL with Prisma ORM
- JWT authentication with role-based access (USER, ADMIN, SUPER_ADMIN)
- TMDB API integration for movie data
- Stripe integration for payments

**Frontend (mobile/):**

- React Native + Expo (targets iOS, Android, Web)
- TypeScript
- Expo Router for navigation
- Supabase for auth
- Platform-specific implementations where needed (.native.tsx, .web.tsx)

## Development Guidelines

### Code Style

- Follow professional coding best practices at all times
- Use TypeScript strictly - no `any` types unless absolutely necessary
- Implement proper error handling with try-catch blocks
- Use meaningful variable and function names
- Add comments for complex logic

### Architecture Patterns

- Keep business logic in controllers/services
- Use validation middleware for all API endpoints
- Implement proper separation of concerns
- Follow existing folder structure conventions:
  - `api/src/modules/[feature]/` - feature-based organization
  - Each module contains: controller, routes, validation, service (if needed)

### Database

- Use Prisma for all database operations
- Create migrations for schema changes: `cd api && npx prisma migrate dev`
- Never modify the database schema directly - always use migrations

### Authentication & Authorization

- All API routes should be protected with appropriate auth middleware
- Role-based access: USER (basic member), ADMIN (event creator), SUPER_ADMIN (full access)
- Frontend uses Supabase auth context (AuthContext.tsx)

### API Development

- RESTful conventions for endpoints
- Consistent response format: `{ success, data, error }`
- Use validation schemas (Zod) for request validation
- Proper HTTP status codes

### Mobile Development

- Use platform-specific files when needed (.native.tsx for mobile, .web.tsx for web)
- Follow the existing component structure in `mobile/src/components/`
- Use the theme system defined in `mobile/src/theme/`
- Implement proper loading states and error handling
- Test on both iOS/Android and Web where applicable

### Key Features to Understand

1. **Events**: Admin-created screenings (in-person or online watchalongs)
2. **TMDB Integration**: Auto-populate movie data (posters, trailers, metadata)
3. **RSVPs**: Members can RSVP to events and add to calendar
4. **Payments**: Stripe integration for ticketed events (optional)
5. **Role-Based Access**: Different capabilities for USER vs ADMIN vs SUPER_ADMIN

## Before Making Changes

- Read relevant existing code to understand patterns
- Check for existing similar implementations
- Ensure changes maintain consistency with existing architecture
- Consider both mobile and web platforms if working on frontend

## Testing

- Test API endpoints manually or with API client
- For mobile: test on both web and native if the feature affects both
- Verify authentication/authorization rules are enforced

## Common Tasks

- **Add new API endpoint**: Create in appropriate module (controller, route, validation)
- **Add new screen**: Place in `mobile/src/screens/`, update navigation
- **Database changes**: Create Prisma migration, update types
- **Add payment feature**: Use existing Stripe service patterns in `api/src/modules/payments/`

## Important Notes

- This is a community events platform for film screenings, NOT a general social media app
- Only ADMIN/SUPER_ADMIN can create events; regular users (USER role) can only browse and RSVP
- The app uses Expo for mobile but also deploys as a web app (Expo Web)
- Calendar integration is a core feature - preserve this functionality
