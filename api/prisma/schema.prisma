generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL") // Commented out - direct connection not accessible
}

model User {
  id        String   @id // Supabase auth.users.id (UUID)
  email     String   @unique
  role      Role     @default(USER)
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rsvps     RSVP[]
  payments  Payment[]
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Event {
  id             String   @id @default(uuid())
  title          String
  description    String?
  date           DateTime
  location       String?
  onlineLink     String?
  movieId        String?  // OMDb/TMDb ID
  movieData      Json?    // Store movie metadata (poster, trailer, etc)
  posterCrop     Json?    // Crop settings for poster in cards (scale, translateX, translateY)
  maxCapacity    Int?     // Optional capacity limit
  createdById    String?  // Staff member who created it
  // Payment fields
  price          Int?     // Price in cents (null = free event)
  payWhatYouCan  Boolean  @default(false) // Allow flexible pricing
  minPrice       Int?     // Minimum price for pay-what-you-can (in cents)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  rsvps          RSVP[]
  payments       Payment[]
  
  @@index([date])
  @@index([createdById])
}

model RSVP {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  status    String   // "going" | "interested" | "not_going"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  amount    Int      // in cents
  status    String   // "pending" | "succeeded" | "failed" | "refunded"
  stripeId  String?  // Optional until Stripe is implemented
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
  @@index([stripeId])
}